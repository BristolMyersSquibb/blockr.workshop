[
  {
    "objectID": "exercises.html",
    "href": "exercises.html",
    "title": "Exercises",
    "section": "",
    "text": "Exercise 1: a palmer penguins, single stack.\n\n\n\n\n\n\n\nClick on the stack\n+\nbutton (top right corner).\n\n\n\n\nAdd a\npalmer_penguins\nblock. You may search in the list.\n\n\n\n\nAdd a new\nfilter_block\nselecting\nsex\nas\ncolumn\nand\nfemale\nas\nvalue\n. Click on run.\n\n\n\n\nAdd a new\nggplot_block\n. Select\nx\nand\ny\nwizely.\n\n\n\n\nAdd a new\ngeompoint_block\n. You may change\nshape\nand\ncolor\n.\n\n\nYou can remove and re-add blocks as you like ...\nExport the stack code and try to run it.\n\n\n\n\n\n\n\n\nExercise 2: distribution of age, single stack.\n\n\n\n\n\n\n\nClick on the\n+\nstack button (top right corner).\n\n\n\n\nAdd a\ncustomdata_block\nwith\ndemo\nas\nselected\ndataset.\n\n\n\n\nAdd a\nggplot_block\nwith\nAGE\n as variable for the\nx\naxis.\n\n\n\n\nAdd a\ngeomhistogram_block\n. You can change the parameters.\n\n\n\n\nAdd a\nlabs_block\nwith\ntitle = 'Distribution of Age'\nx = 'Age (Years)'\nand\ny = 'Count'\nas settings.\n\n\n\n\nAdd a\ntheme_block\n.\n\n\n\n\nAdd a\nscalefillbrewer_block\n.\n\n\n\n\n\n\n\n\n\n\nExercise 3: a palmer penguins workspace.\n\n\n\n\n\n\n\nClick on\nAdd stack\n. From the new stack: click on\n+\nto add a new\nresult_block\n.\n\n\n\n\nAdd a new\nfilter_block\nselecting\nsex\nas\ncolumn\nand\nfemale\nas\nvalue\n. Click on run.\n\n\nNotice how the result block of the second stack changes.\n\n\nAdd a new\nggplot_block\n. Select\nx\nand\ny\nwizely.\n\n\n\n\nAdd a new\ngeompoint_block\n. You may change\nshape\nand\ncolor\n.\n\n\n\n\n\n\n\n\n\n\nExercise 4: joining data.\n\n\n\n\n\n\n\nClick on\nAdd stack\n. From the new stack: click on\n+\nto add a new\ncustomdata_block\n with\nlab\n as selected data.\n\n\n\n\nClick on\nAdd stack\n. From the new stack: click on\n+\nto add a new\ncustomdata_block\n with\ndemo\n as selected data.\n\n\n\n\nAdd a new\njoin_block\nselecting\nlab_data\nas\nStack\nand\ninner\nas\ntype\nand\nc('STUDYID', 'USUBJID')\nas\nby\n. Click on run.\n\n\n\n\n\n\n\n\n\n\nExercise 5: 'Hemoglobin by Visit plot' workspace.\n\n\n\n\n\n\n\nClick on\nAdd stack\nthen add a\nresult_block\nselecting the 'hb_data' stack.\n\n\n\n\nAdd a\nggplot_block\nwith\nx = 'VISIT\nand\ny = 'Mean\nas aesthetics.\n\n\n\n\nAdd a\ngeompoint_block\nwith\nfunc = c('color', 'shape')\nand\nACTARM\nas variable for each aesthetic.\n\n\n\n\nAdd a\ngeomerrorbar_block\nwith\nymin = ymin\nymax = ymax\nand\ncolor = ACTARM\n.\n\n\n\n\nAdd a\ngeomline_block\nwith\ngroup = ACTARM\nand\ncolor = ACTARM\n.\n\n\n\n\nAdd a\nlabs_block\nwith\ntitle = 'Mean and SD of Hemoglobin by Visit'\nx = 'Visit Label'\nand\ny = 'Hemoglobin (g/dL)'\n.\n\n\n\n\nAdd a\ntheme_block\n."
  },
  {
    "objectID": "exercises.html#instructions",
    "href": "exercises.html#instructions",
    "title": "Exercises",
    "section": "",
    "text": "Exercise 1: a palmer penguins, single stack.\n\n\n\n\n\n\n\nClick on the stack\n+\nbutton (top right corner).\n\n\n\n\nAdd a\npalmer_penguins\nblock. You may search in the list.\n\n\n\n\nAdd a new\nfilter_block\nselecting\nsex\nas\ncolumn\nand\nfemale\nas\nvalue\n. Click on run.\n\n\n\n\nAdd a new\nggplot_block\n. Select\nx\nand\ny\nwizely.\n\n\n\n\nAdd a new\ngeompoint_block\n. You may change\nshape\nand\ncolor\n.\n\n\nYou can remove and re-add blocks as you like ...\nExport the stack code and try to run it.\n\n\n\n\n\n\n\n\nExercise 2: distribution of age, single stack.\n\n\n\n\n\n\n\nClick on the\n+\nstack button (top right corner).\n\n\n\n\nAdd a\ncustomdata_block\nwith\ndemo\nas\nselected\ndataset.\n\n\n\n\nAdd a\nggplot_block\nwith\nAGE\n as variable for the\nx\naxis.\n\n\n\n\nAdd a\ngeomhistogram_block\n. You can change the parameters.\n\n\n\n\nAdd a\nlabs_block\nwith\ntitle = 'Distribution of Age'\nx = 'Age (Years)'\nand\ny = 'Count'\nas settings.\n\n\n\n\nAdd a\ntheme_block\n.\n\n\n\n\nAdd a\nscalefillbrewer_block\n.\n\n\n\n\n\n\n\n\n\n\nExercise 3: a palmer penguins workspace.\n\n\n\n\n\n\n\nClick on\nAdd stack\n. From the new stack: click on\n+\nto add a new\nresult_block\n.\n\n\n\n\nAdd a new\nfilter_block\nselecting\nsex\nas\ncolumn\nand\nfemale\nas\nvalue\n. Click on run.\n\n\nNotice how the result block of the second stack changes.\n\n\nAdd a new\nggplot_block\n. Select\nx\nand\ny\nwizely.\n\n\n\n\nAdd a new\ngeompoint_block\n. You may change\nshape\nand\ncolor\n.\n\n\n\n\n\n\n\n\n\n\nExercise 4: joining data.\n\n\n\n\n\n\n\nClick on\nAdd stack\n. From the new stack: click on\n+\nto add a new\ncustomdata_block\n with\nlab\n as selected data.\n\n\n\n\nClick on\nAdd stack\n. From the new stack: click on\n+\nto add a new\ncustomdata_block\n with\ndemo\n as selected data.\n\n\n\n\nAdd a new\njoin_block\nselecting\nlab_data\nas\nStack\nand\ninner\nas\ntype\nand\nc('STUDYID', 'USUBJID')\nas\nby\n. Click on run.\n\n\n\n\n\n\n\n\n\n\nExercise 5: 'Hemoglobin by Visit plot' workspace.\n\n\n\n\n\n\n\nClick on\nAdd stack\nthen add a\nresult_block\nselecting the 'hb_data' stack.\n\n\n\n\nAdd a\nggplot_block\nwith\nx = 'VISIT\nand\ny = 'Mean\nas aesthetics.\n\n\n\n\nAdd a\ngeompoint_block\nwith\nfunc = c('color', 'shape')\nand\nACTARM\nas variable for each aesthetic.\n\n\n\n\nAdd a\ngeomerrorbar_block\nwith\nymin = ymin\nymax = ymax\nand\ncolor = ACTARM\n.\n\n\n\n\nAdd a\ngeomline_block\nwith\ngroup = ACTARM\nand\ncolor = ACTARM\n.\n\n\n\n\nAdd a\nlabs_block\nwith\ntitle = 'Mean and SD of Hemoglobin by Visit'\nx = 'Visit Label'\nand\ny = 'Hemoglobin (g/dL)'\n.\n\n\n\n\nAdd a\ntheme_block\n."
  },
  {
    "objectID": "exercises.html#playground",
    "href": "exercises.html#playground",
    "title": "Exercises",
    "section": "Playground",
    "text": "Playground"
  },
  {
    "objectID": "slides/3-closing/closing.html#congrats",
    "href": "slides/3-closing/closing.html#congrats",
    "title": "Closing remarks",
    "section": "üèÜ Congrats üèÜ",
    "text": "üèÜ Congrats üèÜ\nYou made it!"
  },
  {
    "objectID": "slides/3-closing/closing.html#blockr-is-a-collaborative-concept",
    "href": "slides/3-closing/closing.html#blockr-is-a-collaborative-concept",
    "title": "Closing remarks",
    "section": "blockr is a collaborative concept",
    "text": "blockr is a collaborative concept"
  },
  {
    "objectID": "slides/3-closing/closing.html#use-blocks-and-build-dashboards",
    "href": "slides/3-closing/closing.html#use-blocks-and-build-dashboards",
    "title": "Closing remarks",
    "section": "Use blocks and build dashboards",
    "text": "Use blocks and build dashboards\n\n\n\n\n\nYou have no programming experience ‚Ä¶ No worries this is fine:\n\nExplore blockr documentation for non developers here.\nUse the playground.\nShare dashboards with your teams to speed up data analysis"
  },
  {
    "objectID": "slides/3-closing/closing.html#create-blocks-to-help-your-data-scientists",
    "href": "slides/3-closing/closing.html#create-blocks-to-help-your-data-scientists",
    "title": "Closing remarks",
    "section": "Create blocks to help your data scientists",
    "text": "Create blocks to help your data scientists\n\n\n\n\nYou‚Äôre an advanced R developer, you can extend blockr:\n\nInstall: pak::pak(\"blockr-org/blockr\")\nRead the doc at https://blockr-org.github.io/blockr/index.html.\nEnjoy!"
  },
  {
    "objectID": "slides/0-welcome/welcome.html#hi-and-welcome",
    "href": "slides/0-welcome/welcome.html#hi-and-welcome",
    "title": "Introduction",
    "section": "Hi and Welcome!",
    "text": "Hi and Welcome!"
  },
  {
    "objectID": "slides/0-welcome/welcome.html#important-information",
    "href": "slides/0-welcome/welcome.html#important-information",
    "title": "Introduction",
    "section": "Important information",
    "text": "Important information\n\nWorkshop website: https://bristolmyerssquibb.github.io/blockr.workshop/.\nLink to Posit Cloud: https://posit.cloud/spaces/562609/join?access_code=mg7T-WK4LDzIKbdkrRdFVHPBOWo-HaldODyqtjBk.\n‚Ä¶"
  },
  {
    "objectID": "slides/0-welcome/welcome.html#who-are-you-workshop-pre-requisites",
    "href": "slides/0-welcome/welcome.html#who-are-you-workshop-pre-requisites",
    "title": "Introduction",
    "section": "Who are you: workshop pre-requisites",
    "text": "Who are you: workshop pre-requisites\n\n\nYou are interested in data analysis.\nYou are an R user.\nYou are an R developer with package development knowledge."
  },
  {
    "objectID": "slides/0-welcome/welcome.html#david-granjon",
    "href": "slides/0-welcome/welcome.html#david-granjon",
    "title": "Introduction",
    "section": "David Granjon",
    "text": "David Granjon\n\n\nDavid works as a Lead Shiny Developer at cynkra GmbH and founder of the open source RinteRface organisation."
  },
  {
    "objectID": "slides/0-welcome/welcome.html#karma",
    "href": "slides/0-welcome/welcome.html#karma",
    "title": "Introduction",
    "section": "Karma",
    "text": "Karma\n\n\nKarma is an Innovation Strategy and Solutions Lead at Bristol Myers Squibb."
  },
  {
    "objectID": "slides/0-welcome/welcome.html#john",
    "href": "slides/0-welcome/welcome.html#john",
    "title": "Introduction",
    "section": "John",
    "text": "John\n\n\nJohn is senior R/JS/Go developer and founder/co-founder of Opifex and The Y company."
  },
  {
    "objectID": "slides/0-welcome/welcome.html#objectives",
    "href": "slides/0-welcome/welcome.html#objectives",
    "title": "Introduction",
    "section": "Objectives",
    "text": "Objectives\n\n\nAs an end-user: learn how to leverage blockr to create reproducible data pipelines in minutes without writing any code.\nAs a developer: learn how to empower users to use blockr by developing new blockr and deploying blockr applications."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About us",
    "section": "",
    "text": "Karma Tarap (BMS)\n\nKarma Tarap is an Innovation Strategy and Solutions Lead at Bristol Myers Squibb, bringing over a decade of experience as a statistical programmer in the pharmaceutical industry. With degrees in immunology, microbiology, bioinformatics, and data science. His work focuses on integrating advanced data analytics with insights to accelerate innovation and improve patient outcomes. Additionally, Karma has led multiple introductory R workshops within the industry.\n\n\nJohn Coene (The Y Company)\n\nJohn is a senior developer and data analytics professional with 9 years of working experience. He is the founder and co-founder of Opifex and The Y company. He is an expert in the R/JavaScript and Go languages and has developed hundreds of R packages. John has given numerous talks and workshops, at WhyR, eRum, as a guest on the Shiny dev series podcast discussing user experience, and R in Pharma. John is also the author of the book JavaScript for R published by CRC Press as part of the R series.\n\n\nDavid Granjon (cynkra)\n\nDavid is lead Shiny developer at cynkra and holds a Ph.D.¬†in applied mathematics from Universit√© Pierre et Marie Curie and Universit√© de Lausanne. He is the founder of the open source Interface organization, where he develops Shiny extensions, writes books and delivers advanced Shiny workshops from Posit Conf to R in Pharma. David worked 5 years in the pharma industry where he helped design production-ready Shiny apps.\n\n\nAknowledgement\nWorkshop authors want to warmly thank Nicolas Bennett, Mike Page and Christoph Sax for their involvment in the blockr core development team."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blockr.workshop",
    "section": "",
    "text": "Despite widespread adoption of tools such as Shiny and dplyr, creating dashboards in R remains challenging for non-coding developers. Solutions like PowerBI or Tableau, while popular, are proprietary and expensive, offer limited reproducibility, and have restricted integration with the R ecosystem. To address this gap, we introduce blockr, an open-source dashboard builder (https://github.com/blockr-org). blockr simplifies the construction of parameterised data pipelines as a web application, enabling collaboration and easy sharing of results through self-contained code generation. We emphasize modularity by decomposing pipelines into ‚Äòblocks‚Äô. These ‚Äòblocks‚Äô can be assembled into ‚Äòstacks‚Äô, which can be connected so that the output of one stack serves as the input for others. This architecture results in a reactive dashboard that allows upstream changes to cascade through the analysis, providing instant feedback to the user. General-purpose blocks provided by blockr can be combined with user-created blocks to expand functionality to use-case specific needs. This approach makes it easy to leverage the vast and mature ecosystem of R packages."
  },
  {
    "objectID": "index.html#detailed-schedule",
    "href": "index.html#detailed-schedule",
    "title": "blockr.workshop",
    "section": "Detailed schedule",
    "text": "Detailed schedule\n\nIntroduction to blockr (1h30):\n\nData analysis is like cooking!\nDefinition of fields (ingredients), blocks (instructions), stack (cooking recipie), workspace (dinner party).\nExercise: create your first stack interactively: some data + plots.\nExercise: Use the previously created stack and connect it to anothe within the workspace.\n\nYour first new block (1h30):\n\nIntro about blocks constructors: new_block.\nExercise: Develop a clinical table block.\nIntroduction to the registry, the blocks ‚Äúsupermarket‚Äù.\nExercise: use the registry to expose this block to the outside world.\nLeverage S3 to customise part of the UI/server.\nExercise: Add a new render method to display interactive tables."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#developing-enterprise-grade-dashboards-isnt-easy",
    "href": "slides/1-blockr-user/blockr-user.html#developing-enterprise-grade-dashboards-isnt-easy",
    "title": "Introduction to blockr for users",
    "section": "Developing enterprise-grade dashboards isn‚Äôt easy",
    "text": "Developing enterprise-grade dashboards isn‚Äôt easy"
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#commercial-solutions",
    "href": "slides/1-blockr-user/blockr-user.html#commercial-solutions",
    "title": "Introduction to blockr for users",
    "section": "Commercial solutions",
    "text": "Commercial solutions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLicense cost üí≤üí≤üí≤.\nNot R specific."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#introducing-blockr",
    "href": "slides/1-blockr-user/blockr-user.html#introducing-blockr",
    "title": "Introduction to blockr for users",
    "section": "üí° Introducing {blockr}",
    "text": "üí° Introducing {blockr}\n\n\n‚ÄúShiny‚Äôs WordPress‚Äù (John Coene, 2024)\n\n\n\n\n\n\n\n\n\nSupermarket for data analysis with R.\nNo-Code dashboard builder ‚Ä¶\n‚Ä¶ Extendable by developers.\nCollaborative tool.\nReproducible code."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#problem-palmer-penguins-plot",
    "href": "slides/1-blockr-user/blockr-user.html#problem-palmer-penguins-plot",
    "title": "Introduction to blockr for users",
    "section": "Problem: palmer penguins plot",
    "text": "Problem: palmer penguins plot\n\nWhat penguin species has the largest flippers?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow can I produce this plot?"
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#the-stack-a-data-analysis-recipe",
    "href": "slides/1-blockr-user/blockr-user.html#the-stack-a-data-analysis-recipe",
    "title": "Introduction to blockr for users",
    "section": "The stack: a data analysis recipe",
    "text": "The stack: a data analysis recipe\n\n\n\n\n\n\n\n\n\n\n\nStack\n\n\n\ndata\n\n\n\ndata\n\n\n\nBlock 1\n\n\n\nData: dataset, browser, ‚Ä¶\n\n\n\nBlock 2\n\n\n\nTransform block: filter, select ‚Ä¶\n\n\n\nBlock 3\n\n\n\nResult/transform: plot, filter, ‚Ä¶\n\n\n\n\n\n\n\n\n\nCollection of instructions, blocks, from data import to wrangling/visualization."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#zoom-on-blocks-processing-units",
    "href": "slides/1-blockr-user/blockr-user.html#zoom-on-blocks-processing-units",
    "title": "Introduction to blockr for users",
    "section": "Zoom on blocks: processing units",
    "text": "Zoom on blocks: processing units\n\nBlocks categories: import (data), transform data, visualize, ‚Ä¶\nProvided by developers (or us).\n\n\n\n\n\nDesigned by upklyak / Freepik"
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#example-transform-blocks",
    "href": "slides/1-blockr-user/blockr-user.html#example-transform-blocks",
    "title": "Introduction to blockr for users",
    "section": "Example: transform blocks",
    "text": "Example: transform blocks\n\n\n\n\n\n\n\nflowchart TD\n  blk_data_in(Input data)\n  blk_data_out[Output]\n  subgraph blk_block[Transform block]\n    blk_field1(Field 1)\n    blk_field2(Field 2)\n    blk_field1 --&gt; |interactivity| blk_expr\n    blk_field2 --&gt; |interactivity| blk_expr\n    blk_expr(Expression)\n    blk_res(result)\n    blk_expr --&gt; |evaluate| blk_res\n  end\n  blk_data_in --&gt; blk_block --&gt; blk_data_out\n\n\n\n\n\n\n\nA transform block:\n\nTakes input data.\nExposes interactive input to transform the data (select column, filter rows, ‚Ä¶).\nReturns the transformed data."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#exercise-1",
    "href": "slides/1-blockr-user/blockr-user.html#exercise-1",
    "title": "Introduction to blockr for users",
    "section": "üß™ Exercise 1",
    "text": "üß™ Exercise 1\n\n\n\n\n\n\n\n\nInstructions:\n\nClick on the + button (top right corner).\nAdd a palmer_penguins block. You may search in the list.\nAdd a new filter_block, selecting sex as column and female as value. Click on run.\nAdd a new ggplot_block. Select x and y wizely.\nAdd a new geompoint_block. You may change shape and color.\nYou can remove and re-add blocks as you like ‚Ä¶\nExport the stack code and try to run it."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#how-much-code-would-it-take-with-shiny",
    "href": "slides/1-blockr-user/blockr-user.html#how-much-code-would-it-take-with-shiny",
    "title": "Introduction to blockr for users",
    "section": "How much code would it take with Shiny?",
    "text": "How much code would it take with Shiny?\n\n\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nshinyApp(\n  ui = page_fluid(\n    layout_sidebar(\n      sidebar = sidebar(\n        radioButtons(\"sex\", \"Sex\", unique(penguins$sex), \"female\"),\n        selectInput(\n          \"xvar\", \n          \"X var\", \n          colnames(dplyr::select(penguins, where(is.numeric))),\n          \"body_mass_g\"\n        ),\n        selectInput(\n          \"yvar\",\n          \"Y var\",\n          colnames(dplyr::select(penguins, where(is.numeric))),\n          \"flipper_length_mm\"\n        ),\n        selectInput(\n          \"color\",\n          \"Color and shape\",\n          colnames(dplyr::select(penguins, where(is.factor))),\n          \"species\"\n        )\n      ),\n      plotOutput(\"plot\")\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot &lt;- renderPlot({\n      penguins |&gt;\n        filter(sex == !!input$sex) |&gt;\n        ggplot(aes(x = !!input$xvar, y = !!input$yvar)) +\n        geom_point(aes(color = !!input$color, shape = !!input$color), size = 2)\n    })\n  }\n)\n\n\nChanging the data, you also need to change the entire hardcoded server logic!"
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#its-much-easier-with-blockr",
    "href": "slides/1-blockr-user/blockr-user.html#its-much-easier-with-blockr",
    "title": "Introduction to blockr for users",
    "section": "It‚Äôs much easier with blockr",
    "text": "It‚Äôs much easier with blockr\n\n\nlibrary(blockr)\n1new_stack(\n2  data_block = new_dataset_block(\"penguins\", \"palmerpenguins\"),\n  filter_block = new_filter_block(\"sex\", \"female\"),\n3  plot_block = new_ggplot_block(\"body_mass_g\", \"flipper_length_mm\"),\n4  layer_block = new_geompoint_block(\"species\", \"species\")\n)\n5serve_stack(stack)\n\n\n1\n\nCreate the stack.\n\n2\n\nImport data.\n\n3\n\nCreate the plot.\n\n4\n\nAdd it a layer.\n\n5\n\nServe a Shiny app."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#exercise-2-with-pharma-data",
    "href": "slides/1-blockr-user/blockr-user.html#exercise-2-with-pharma-data",
    "title": "Introduction to blockr for users",
    "section": "üß™ Exercise 2: with pharma data",
    "text": "üß™ Exercise 2: with pharma data\n\n\n\n\n\n\n\n\nInstructions: distribution of age in demo dataset\n\nAdd a customdata_block with demo as selected dataset.\nAdd a ggplot_block with x as func and AGE as default_columns.\nAdd a geomhistogram_block (you can leave default settings).\nAdd a labs_block with title = \"Distribution of Age\", x = \"Age (Years), y = \"Count\" as settings.\nAdd a theme_block.\nAdd a scalefillbrewer_block."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#connecting-stacks-towards-a-dinner-party",
    "href": "slides/1-blockr-user/blockr-user.html#connecting-stacks-towards-a-dinner-party",
    "title": "Introduction to blockr for users",
    "section": "Connecting stacks: towards a dinner party",
    "text": "Connecting stacks: towards a dinner party"
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#the-workspace",
    "href": "slides/1-blockr-user/blockr-user.html#the-workspace",
    "title": "Introduction to blockr for users",
    "section": "The workspace",
    "text": "The workspace\n\n\n\n\n\n\n\nflowchart TD\n  subgraph LR workspace[Workspace]\n    subgraph stack1[Stack]\n      direction LR\n      subgraph input_block[Block 1]\n        input(Data: dataset, browser, ...)\n      end\n      subgraph transform_block[Block 2]\n        transform(Transform block: filter, select ...)\n      end\n      subgraph output_block[Block 3]\n        output(Result/transform: plot, filter, ...)\n      end\n      input_block --&gt; |data| transform_block --&gt; |data| output_block\n    end\n    subgraph stack2[Stack 2]\n      stack1_data[Stack 1 data] --&gt; |data| transform2[Transform]\n    end\n    stack1 --&gt; |data| stack2\n    subgraph stackn[Stack n]\n      stacki_data[Stack i data] --&gt; |data| transformn[Transform] --&gt; |data| Visualize\n    end\n    stack2 ---&gt; |... data| stackn\n  end\n\n\n\n\n\n\n\nCollection of recipes (stacks) to build a dashboard."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#exercise-3-share-data-between-stacks",
    "href": "slides/1-blockr-user/blockr-user.html#exercise-3-share-data-between-stacks",
    "title": "Introduction to blockr for users",
    "section": "üß™ Exercise 3: share data between stacks",
    "text": "üß™ Exercise 3: share data between stacks\n\n\n\n\n\n\n\n\nInstructions:\n\nClick on Add stack.\nFrom the new stack: click on + to add a new result_block.\nAdd a new filter_block to stack 1, with sex as column and female as value.\nNotice how the result of the second stack changes.\nAdd a new ggplot_block.\nAdd a new geom_point block."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#how-do-i-create-a-workspace",
    "href": "slides/1-blockr-user/blockr-user.html#how-do-i-create-a-workspace",
    "title": "Introduction to blockr for users",
    "section": "How do I create a workspace?",
    "text": "How do I create a workspace?\n\nlibrary(blockr)\n# Creates an empty workspace\n1set_workspace(\n2  stack_1 = new_stack(),\n  stack_2 = new_stack()\n)\n3serve_workspace(clear = FALSE)\n\n\n1\n\nInitialise.\n\n2\n\nOptional: add stacks.\n\n3\n\nServe Shiny app."
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#exercise-4-joining-data",
    "href": "slides/1-blockr-user/blockr-user.html#exercise-4-joining-data",
    "title": "Introduction to blockr for users",
    "section": "üß™ Exercise 4: joining data",
    "text": "üß™ Exercise 4: joining data\n\n\n\n\n\n\n\n\n\nClick on Add stack, then add it a customdata_block with lab data.\nClick on Add stack.\n\nAdd a customdata_block with demo data.\nAdd a join_block with Stack = \"lab_data\", type = \"inner\", by = c(\"STUDYID\", \"USUBJID\")"
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#exercise-5-hemoglobin-by-visit-plot",
    "href": "slides/1-blockr-user/blockr-user.html#exercise-5-hemoglobin-by-visit-plot",
    "title": "Introduction to blockr for users",
    "section": "üß™ Exercise 5: Hemoglobin by Visit plot",
    "text": "üß™ Exercise 5: Hemoglobin by Visit plot\n\n\n\n\n\n\n\n\n\nConsider the previous 2 stacks (lab data merged with demo data).\nClick on Add stack, then add a result_block, targeting the hb_data stack:\n\nAdd a ggplot_block with x = \"VISIT\" and y = \"Mean\" as aesthetics.\nAdd a geompoint_block with func = c(\"color\", \"shape\") and default_columns = c(\"ACTARM\", \"ACTARM\").\nAdd a geomerrorbar_block with ymin = ymin, ymax = ymax and color = ACTARM.\nAdd a geomline_block with group = ACTARM and color = ACTARM.\nAdd a labs_block with title = \"Mean and SD of Hemoglobin by Visit\", x = \"Visit Label\" and y = \"Hemoglobin (g/dL)\".\nAdd a theme_block, selecting whatever theme you like.\nTBC‚Ä¶"
  },
  {
    "objectID": "slides/1-blockr-user/blockr-user.html#how-far-can-i-go-with-blockr",
    "href": "slides/1-blockr-user/blockr-user.html#how-far-can-i-go-with-blockr",
    "title": "Introduction to blockr for users",
    "section": "How far can I go with blockr?",
    "text": "How far can I go with blockr?"
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#zoom-on-blocks-and-fields",
    "href": "slides/2-blockr-dev/blockr-dev.html#zoom-on-blocks-and-fields",
    "title": "Introduction to blockr for developers",
    "section": "Zoom on blocks and fields ü•¶ ü•ö",
    "text": "Zoom on blocks and fields ü•¶ ü•ö\n\n\n\n\n\n\n\nflowchart TD\n  blk_data_in(Data input)\n  blk_data_out[Output]\n  subgraph blk_block[Block]\n    subgraph blk_field1[Field 1]\n      value(Value)\n      title(Title)\n      descr(Description)\n      status(Status)\n    end\n    blk_field2(Field 2)\n    blk_field1 --&gt; blk_expr\n    blk_field2 --&gt; blk_expr\n    blk_expr(Expression)\n    blk_res(result)\n    blk_expr --&gt; blk_res\n  end\n  blk_data_in --&gt; blk_block --&gt; blk_data_out\n\n\n\n\n\n\n\n\nFields are ingredients.\nA block is a recipe step:\n\n(Optional) input data.\nfields, build the block expression and translated into Shiny inputs.\nAn expression, evaluated with input data: data |&gt; select(&lt;COLNAMES&gt;).\nA result, of the evaluated expression.\nA class for customization (see advanced part)."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-16",
    "href": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-16",
    "title": "Introduction to blockr for developers",
    "section": "How does a select block look like? (1/6)",
    "text": "How does a select block look like? (1/6)\n\n\n1new_select_block &lt;- function (columns = character(), ...) {\n  all_cols &lt;- function(data) colnames(data)\n  fields &lt;- list(\n    columns = new_select_field(columns, all_cols, multiple = TRUE, title = \"Columns\")\n  )\n\n  select_expr &lt;- quote(dplyr::select(.(columns)))\n\n  new_block(\n    fields = fields,\n    expr = select_expr,\n    class = c(\"select_block\", \"transform_block\"),\n    ...\n  )\n}\n\n\n1\n\nConstructor with parameters."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-26",
    "href": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-26",
    "title": "Introduction to blockr for developers",
    "section": "How does a select block look like? (2/6)",
    "text": "How does a select block look like? (2/6)\n\n\nnew_select_block &lt;- function (columns = character(), ...)\n{\n2  all_cols &lt;- function(data) colnames(data)\n  fields &lt;- list(\n    columns = new_select_field(columns, all_cols, multiple = TRUE, title = \"Columns\")\n  )\n\n  select_expr &lt;- quote(dplyr::select(.(columns)))\n\n  new_block(\n    fields = fields,\n    expr = select_expr,\n    class = c(\"select_block\", \"transform_block\"),\n    ...\n  )\n}\n\n\n2\n\nDynamic field (changes with data)."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-36",
    "href": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-36",
    "title": "Introduction to blockr for developers",
    "section": "How does a select block look like? (3/6)",
    "text": "How does a select block look like? (3/6)\n\n\nnew_select_block &lt;- function (columns = character(), ...)\n{\n  all_cols &lt;- function(data) colnames(data)\n  fields &lt;- list(\n    columns = new_select_field(columns, all_cols, multiple = TRUE, title = \"Columns\")\n  )\n\n3  select_expr &lt;- quote(dplyr::select(.(columns)))\n\n  new_block(\n    fields = fields,\n    expr = select_expr,\n    class = c(\"select_block\", \"transform_block\"),\n    ...\n  )\n}\n\n\n3\n\nCreate the expression (to calculate the result)."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-46",
    "href": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-46",
    "title": "Introduction to blockr for developers",
    "section": "How does a select block look like? (4/6)",
    "text": "How does a select block look like? (4/6)\n\n\nnew_select_block &lt;- function (columns = character(), ...)\n{\n  all_cols &lt;- function(data) colnames(data)\n  fields &lt;- list(\n    columns = new_select_field(columns, all_cols, multiple = TRUE, title = \"Columns\")\n  )\n\n  select_expr &lt;- quote(dplyr::select(.(columns)))\n\n  new_block(\n    fields = fields,\n    expr = select_expr,\n4    class = c(\"select_block\", \"transform_block\"),\n    ...\n  )\n}\n\n\n4\n\nAdd custom class transform_block."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-56",
    "href": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-56",
    "title": "Introduction to blockr for developers",
    "section": "How does a select block look like? (5/6)",
    "text": "How does a select block look like? (5/6)\n\n\nnew_select_block &lt;- function (columns = character(), ...)\n{\n  all_cols &lt;- function(data) colnames(data)\n  fields &lt;- list(\n    columns = new_select_field(columns, all_cols, multiple = TRUE, title = \"Columns\")\n  )\n\n  select_expr &lt;- quote(dplyr::select(.(columns)))\n\n  new_block(\n    fields = fields,\n    expr = select_expr,\n    class = c(\"select_block\", \"transform_block\"),\n5    ...\n  )\n}\n\n\n5\n\n... for extra parameters like submit."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-66",
    "href": "slides/2-blockr-dev/blockr-dev.html#how-does-a-select-block-look-like-66",
    "title": "Introduction to blockr for developers",
    "section": "How does a select block look like? (6/6)",
    "text": "How does a select block look like? (6/6)\n\n\nnew_select_block &lt;- function (columns = character(), ...)\n{\n  all_cols &lt;- function(data) colnames(data)\n  fields &lt;- list(\n    columns = new_select_field(columns, all_cols, multiple = TRUE, title = \"Columns\")\n  )\n\n  select_expr &lt;- quote(dplyr::select(.(columns)))\n\n6  new_block(\n    fields = fields,\n    expr = select_expr,\n    class = c(\"select_block\", \"transform_block\"),\n    ...\n  )\n}\n\n\n6\n\nCall new_block, passing fields, an expression and custom class."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#todays-mission",
    "href": "slides/2-blockr-dev/blockr-dev.html#todays-mission",
    "title": "Introduction to blockr for developers",
    "section": "Today‚Äôs mission",
    "text": "Today‚Äôs mission\nCreate a new cardinal1 block:\ncardinal::make_table_09_gtsum\n\n\ncode: https://github.com/pharmaverse/cardinal/blob/main/R/fda-table_09.R#L375"
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#exercise-1-create-new-blocks-fields",
    "href": "slides/2-blockr-dev/blockr-dev.html#exercise-1-create-new-blocks-fields",
    "title": "Introduction to blockr for developers",
    "section": "üß™ Exercise 1: create new blocks (fields)",
    "text": "üß™ Exercise 1: create new blocks (fields)\n\n\nnew_cardinal09_block &lt;- function(\n  id_var = \"USUBJID\",\n  arm_var = \"ARM\",\n  saffl_var = \"SAFFL\",\n  pref_var = \"AEDECOD\",\n  show_colcounts = TRUE,\n  ...) {\n\n}\n\n\nOpen the Posit Cloud project.\nOpen R/cardinal.R.\nCreate a field for each parameter. For booleans you can use new_switch_field(&lt;VALUE&gt;) and new_select_field(values, choices) for other parameters. You can use the existing all_cols for dynamic choices."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#exercise-1-solution",
    "href": "slides/2-blockr-dev/blockr-dev.html#exercise-1-solution",
    "title": "Introduction to blockr for developers",
    "section": "üß™ Exercise 1: solution",
    "text": "üß™ Exercise 1: solution\n\n\nnew_cardinal09_block &lt;- function(\n  id_var = \"USUBJID\",\n  arm_var = \"ARM\",\n  saffl_var = \"SAFFL\",\n  pref_var = \"AEDECOD\",\n  show_colcounts = TRUE,\n  ...) {\n\n1  all_cols &lt;- function(data) colnames(data)\n\n2  fields &lt;- list(\n    id_var = new_select_field(id_var, all_cols, title = \"ID\"),\n    arm_var = new_select_field(arm_var, all_cols, title = \"ARM\"),\n    saffl_var = new_select_field(saffl_var, all_cols, title = \"SAFFL\"),\n    pref_var = new_select_field(pref_var, all_cols, title = \"Pref\"),\n    show_colcounts = new_switch_field(show_colcounts, title = \"Show column counts\")\n  )\n\n  new_block(\n    fields = fields,\n\n  )\n}\n\n\n1\n\nConstruct columns dynamically.\n\n2\n\nAdd field(s) for interactivity."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#exercise-2-create-new-blocks-expression",
    "href": "slides/2-blockr-dev/blockr-dev.html#exercise-2-create-new-blocks-expression",
    "title": "Introduction to blockr for developers",
    "section": "üß™ Exercise 2: create new blocks (expression)",
    "text": "üß™ Exercise 2: create new blocks (expression)\n\n\nnew_cardinal09_block &lt;- function(\n  id_var = \"USUBJID\",\n  arm_var = \"ARM\",\n  saffl_var = \"SAFFL\",\n  pref_var = \"AEDECOD\",\n  show_colcounts = TRUE,\n  ...) {\n\n  all_cols &lt;- function(data) colnames(data)\n\n  fields &lt;- list(\n    id_var = new_select_field(id_var, all_cols, title = \"ID\"),\n    arm_var = new_select_field(arm_var, all_cols, title = \"ARM\"),\n    saffl_var = new_select_field(saffl_var, all_cols, title = \"SAFFL\"),\n    pref_var = new_select_field(pref_var, all_cols, title = \"Pref\"),\n    show_colcounts = new_switch_field(show_colcounts, title = \"Show column counts\")\n  )\n\n  new_block(\n    fields = fields,\n    expr = quote({\n      cardinal::make_table_09_gtsum(\n        adae = data,\n        # TO DO\n      )\n    })\n  )\n}\n\n\nFill in the cardinal::make_table_09_gtsum call to pass in fields name like so: &lt;param_name&gt; = .(field_name). This strange notation is needed by bquote for partial substitution."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#exercise-2-solution",
    "href": "slides/2-blockr-dev/blockr-dev.html#exercise-2-solution",
    "title": "Introduction to blockr for developers",
    "section": "üß™ Exercise 2: solution",
    "text": "üß™ Exercise 2: solution\n\n\nnew_cardinal09_block &lt;- function(\n  id_var = \"USUBJID\",\n  arm_var = \"ARM\",\n  saffl_var = \"SAFFL\",\n  pref_var = \"AEDECOD\",\n  show_colcounts = TRUE,\n  ...) {\n\n  all_cols &lt;- function(data) colnames(data)\n\n  fields &lt;- list(\n    id_var = new_select_field(id_var, all_cols, title = \"ID\"),\n    arm_var = new_select_field(arm_var, all_cols, title = \"ARM\"),\n    saffl_var = new_select_field(saffl_var, all_cols, title = \"SAFFL\"),\n    pref_var = new_select_field(pref_var, all_cols, title = \"Pref\"),\n    show_colcounts = new_switch_field(show_colcounts, title = \"Show column counts\")\n  )\n\n  new_block(\n    fields = fields,\n3    expr = quote({\n      cardinal::make_table_09_gtsum(\n        adae = data,\n        arm_var = .(arm_var),\n        saffl_var = .(saffl_var),\n        id_var = .(id_var),\n        pref_var = .(pref_var),\n        show_colcounts = .(show_colcounts)\n      )\n    })\n  )\n}\n\n\n3\n\nThis expression is then evaluated later with the previous block‚Äôs data and field values."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#how-to-control-blocks-behavior-about-blockr-classes",
    "href": "slides/2-blockr-dev/blockr-dev.html#how-to-control-blocks-behavior-about-blockr-classes",
    "title": "Introduction to blockr for developers",
    "section": "How to control block‚Äôs behavior? About blockr classes",
    "text": "How to control block‚Äôs behavior? About blockr classes\n\n\n\n\n\n\n\nflowchart LR\n  block_generic[Block generic] --&gt; data_block_method[Data block method]\n  block_generic --&gt; transform_block_method[Transform block method]\n  block_generic --&gt; plot_block_method[Plot block method]\n\n\n\n\n\n\n\nS3 OO system1: customize behavior depending on object class.\nuiOutputBlock.block &lt;- function(x, ns) {\n  DT::dataTableOutput(ns(\"res\"))\n}\n\nserver_output.block &lt;- function(x, result, output) {\n  DT::renderDT(\n    {\n      result() |&gt;\n        DT::datatable(\n          selection = \"none\",\n          options = list(\n            pageLength = 5L,\n            processing = FALSE\n          )\n        )\n    },\n    server = TRUE\n  )\n}\n\nS3 Object Oriented system https://adv-r.hadley.nz/s3.html"
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#exercise-3-create-new-blocks-adding-class",
    "href": "slides/2-blockr-dev/blockr-dev.html#exercise-3-create-new-blocks-adding-class",
    "title": "Introduction to blockr for developers",
    "section": "üß™ Exercise 3: create new blocks (adding class)",
    "text": "üß™ Exercise 3: create new blocks (adding class)\n\n\nnew_cardinal09_block &lt;- function(\n  id_var = \"USUBJID\",\n  arm_var = \"ARM\",\n  saffl_var = \"SAFFL\",\n  pref_var = \"AEDECOD\",\n  show_colcounts = TRUE,\n  ...) {\n\n  all_cols &lt;- function(data) colnames(data)\n\n  fields &lt;- list(\n    id_var = new_select_field(id_var, all_cols, title = \"ID\"),\n    arm_var = new_select_field(arm_var, all_cols, title = \"ARM\"),\n    saffl_var = new_select_field(saffl_var, all_cols, title = \"SAFFL\"),\n    pref_var = new_select_field(pref_var, all_cols, title = \"Pref\"),\n    show_colcounts = new_switch_field(show_colcounts, title = \"Show column counts\")\n  )\n\n  new_block(\n    fields = fields,\n    expr = quote({\n      cardinal::make_table_09_gtsum(\n        adae = data,\n        arm_var = .(arm_var),\n        saffl_var = .(saffl_var),\n        id_var = .(id_var),\n        pref_var = .(pref_var),\n        show_colcounts = .(show_colcounts)\n      )\n    }),\n    ...,\n    class =  \"&lt;TO_REPLACE&gt;\"\n  )\n}\n\n\nGive it the correct classes. Hints:\n\nThis isn‚Äôt a entry point block, so no data_block class.\nAs cardinal::make_table_09_gtsum does not return data, we can‚Äôt call it transform_block."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#exercise-3-solution",
    "href": "slides/2-blockr-dev/blockr-dev.html#exercise-3-solution",
    "title": "Introduction to blockr for developers",
    "section": "üß™ Exercise 3: solution",
    "text": "üß™ Exercise 3: solution\n\n\nnew_cardinal09_block &lt;- function(\n  id_var = \"USUBJID\",\n  arm_var = \"ARM\",\n  saffl_var = \"SAFFL\",\n  pref_var = \"AEDECOD\",\n  show_colcounts = TRUE,\n  ...) {\n\n  all_cols &lt;- function(data) colnames(data)\n\n  fields &lt;- list(\n    id_var = new_select_field(id_var, all_cols, title = \"ID\"),\n    arm_var = new_select_field(arm_var, all_cols, title = \"ARM\"),\n    saffl_var = new_select_field(saffl_var, all_cols, title = \"SAFFL\"),\n    pref_var = new_select_field(pref_var, all_cols, title = \"Pref\"),\n    show_colcounts = new_switch_field(show_colcounts, title = \"Show column counts\")\n  )\n\n  new_block(\n    fields = fields,\n    expr = quote({\n      cardinal::make_table_09_gtsum(\n        adae = data,\n        arm_var = .(arm_var),\n        saffl_var = .(saffl_var),\n        id_var = .(id_var),\n        pref_var = .(pref_var),\n        show_colcounts = .(show_colcounts)\n      )\n    }),\n    ...,\n4    class = c(\"cardinal09_block\")\n  )\n}\n\n\n4\n\nWe‚Äôll call it cardinal09_block. Note that blockr does not support any method for this class. This is important for the following."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#testing-our-block",
    "href": "slides/2-blockr-dev/blockr-dev.html#testing-our-block",
    "title": "Introduction to blockr for developers",
    "section": "Testing our block?",
    "text": "Testing our block?\npkgload::load_all()\nlibrary(blockr)\nlibrary(cardinal)\nmy_stack &lt;- new_stack(\n  new_dataset_block(\"cadae\", \"random.cdisc.data\"),\n  new_cardinal09_block()\n)\nserve_stack(my_stack)\n\nOpen inst/examples/app.R (code above) and run it.\nWhy does this fail?\nWhat did we miss?"
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#adding-missing-pieces",
    "href": "slides/2-blockr-dev/blockr-dev.html#adding-missing-pieces",
    "title": "Introduction to blockr for developers",
    "section": "Adding missing pieces",
    "text": "Adding missing pieces\n\n\nWe need a function that renders gt outputs (server and ui side).\n\n\n\n\nWe need a server method for cardinal09_block. We can inherit the transform block one.\n\n\n\ngenerate_server.cardinal09_block &lt;- blockr:::generate_server.transform_block\n\nuiOutputBlock.cardinal09_block &lt;- function(x, ns) {\n  gt::gt_output(ns(\"res\"))\n}\n\nserver_output.cardinal09_block &lt;- function(x, result, output) {\n  gt::render_gt(result())\n}"
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#how-do-we-make-custom-blocks-available-to-users",
    "href": "slides/2-blockr-dev/blockr-dev.html#how-do-we-make-custom-blocks-available-to-users",
    "title": "Introduction to blockr for developers",
    "section": "How do we make custom blocks available to users?",
    "text": "How do we make custom blocks available to users?"
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#the-registry-the-blocks-supermarket",
    "href": "slides/2-blockr-dev/blockr-dev.html#the-registry-the-blocks-supermarket",
    "title": "Introduction to blockr for developers",
    "section": "The registry: the blocks supermarket",
    "text": "The registry: the blocks supermarket\n\n\n\n\n\n\n\n\n\n\n\nregister\n\n\n\nregister\n\n\n\nRegistry\n\n\n\nunregister\n\n\n\nSelect block\n\n\n\nName: select block\n\n\n\nDescription: select columns in a table\n\n\n\nClasses: select_block, tranform_block\n\n\n\nInput: data.frame\n\n\n\nOutput: data.frame\n\n\n\nPackage: blockr\n\n\n\nFilter block\n\n\n\n\n\n\n\nblockr.echarts4r\n\n\n\nNew block\n\n\n\nNew block\n\n\n\nblockr.ggplot2\n\n\n\nNew block\n\n\n\nNew block\n\n\n\n\n\n\n\n\n\n\nInformation about blocks.\nShared between block packages."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#exercise-4-filling-the-supermarket-with-block",
    "href": "slides/2-blockr-dev/blockr-dev.html#exercise-4-filling-the-supermarket-with-block",
    "title": "Introduction to blockr for developers",
    "section": "üß™ Exercise 4: filling the supermarket with block",
    "text": "üß™ Exercise 4: filling the supermarket with block\n\nStill within R/cardinal.R, have a look at register_cardinal_blocks.\nFill in relevant information for your new_cardinal09_block.\nWithin R/zzz.R, call register_cardinal_blocks to register the block(s) on package load.\nRun the following:\n\npkgload::load_all()\nlibrary(blockr)\nlibrary(cardinal)\nmy_stack &lt;- new_stack(\n  new_dataset_block(\"cadae\", \"random.cdisc.data\")\n)\nserve_stack(my_stack)\n\nCLick on the stack + button, look for the cardinal09_block and select it."
  },
  {
    "objectID": "slides/2-blockr-dev/blockr-dev.html#exercise-4-solution",
    "href": "slides/2-blockr-dev/blockr-dev.html#exercise-4-solution",
    "title": "Introduction to blockr for developers",
    "section": "üß™ Exercise 4: solution",
    "text": "üß™ Exercise 4: solution\n\nregister_lm_block &lt;- function(pkg) {\n  register_block(\n    constructor = new_cardinal09_block,\n    name = \"cardinal09 block\",\n    description = \"Create a cardinal09 block\",\n    classes = c(\"cardinal09_block\", \"transform_block\"),\n    input = \"data.frame\",\n    output = \"gt\",\n    package = pkg\n  )\n}\n\n# Put in zzz.R\n.onLoad &lt;- function(libname, pkgname) {\n  register_lm_block(pkgname)\n  invisible(NULL)\n}"
  }
]