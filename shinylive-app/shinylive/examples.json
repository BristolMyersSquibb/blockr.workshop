[
  {
    "engine": "r",
    "examples": [
      {
        "category": "1-blockr-user",
        "apps": [
          {
            "files": [
              {
                "name": "app.R",
                "content": "webr::install(\"blockr\", repos = c(\"https://bristolmyerssquibb.github.io/webr-repos/\", \"https://repo.r-wasm.org\"))\n\nlibrary(blockr)\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\nnew_ggplot_block <- function(col_x = character(), col_y = character(), ...) {\n\n  data_cols <- function(data) colnames(data)\n\n  new_block(\n    fields = list(\n      x = new_select_field(col_x, data_cols, type = \"name\"),\n      y = new_select_field(col_y, data_cols, type = \"name\")\n    ),\n    expr = quote(\n      ggplot(mapping = aes(x = .(x), y = .(y)))\n    ),\n    class = c(\"ggplot_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_geompoint_block <- function(color = character(), shape = character(), ...) {\n\n  data_cols <- function(data) colnames(data$data)\n\n  new_block(\n    fields = list(\n      color = new_select_field(color, data_cols, type = \"name\"),\n      shape = new_select_field(shape, data_cols, type = \"name\")\n    ),\n    expr = quote(\n      geom_point(aes(color = .(color), shape = .(shape)), size = 2)\n    ),\n    class = c(\"geompoint_block\", \"plot_layer_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_penguins_block <- function(selected = character()) {\n  new_dataset_block(selected, package = \"palmerpenguins\")\n}\n\nregister_blocks(\n  constructor = c(new_penguins_block, new_ggplot_block, new_geompoint_block),\n  name = c(\"penguins block\", \"ggplot block\", \"geompoint block\"),\n  description = c(\n    \"Data from palmerpenguins package\",\n    \"Builds a ggplot object\",\n    \"Add points geom to ggplot object\"\n  ),\n  classes = list(\n    c(\"palmer_penguins\", \"dataset_block\", \"data_block\"),\n    c(\"ggplot_block\", \"plot_block\"),\n    c(\"geompoint_block\", \"plot_layer_block\", \"plot_block\")\n  ),\n  input = c(NA_character_, \"data.frame\", \"ggplot\"),\n  output = c(\"data.frame\", \"ggplot\", \"ggplot\"),\n  package = \"blockr.demo\",\n  category = c(\"custom data\", \"visualisation\", \"visualisation\")\n)\n\nstack <- new_stack()\nserve_stack(stack)",
                "type": "text"
              }
            ],
            "about": "Palmer penguins single stack",
            "title": "exercise-1"
          },
          {
            "files": [
              {
                "name": "app.R",
                "content": "webr::install(\"blockr\", repos = c(\"https://bristolmyerssquibb.github.io/webr-repos/\", \"https://repo.r-wasm.org\"))\nwebr::install(\"blockr.data\", repos = c(\"https://bristolmyerssquibb.github.io/webr-repos/\", \"https://repo.r-wasm.org\"))\n\nlibrary(blockr)\nlibrary(ggplot2)\n\nnew_ggplot_block <- function(col_x = character(), ...) {\n\n  data_cols <- function(data) colnames(data)\n\n  new_block(\n    fields = list(\n      x = new_select_field(col_x, data_cols, type = \"name\")\n    ),\n    expr = quote(\n      ggplot(mapping = aes(x = .(x)))\n    ),\n    class = c(\"ggplot_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_geomhistogram_block <- function(binwidth = 5, fill = \"blue\", alpha = 0.7, ...) {\n  new_block(\n    fields = list(\n      binwidth = new_numeric_field(binwidth, min = 5, max = 20),\n      fill = new_string_field(fill),\n      alpha = new_numeric_field(alpha, min = 0, max = 1)\n    ),\n    expr = quote(\n      ggplot2::geom_histogram(binwidth = .(binwidth), fill = .(fill), alpha = .(alpha))\n    ),\n    class = c(\"geomhistogram_block\", \"plot_layer_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_theme_block <- function(...) {\n  new_block(\n    fields = list(\n      theme = new_select_field(\"theme_minimal\", \n        (function(x) {\n            x[!x %in% c(\"theme_set\", \"theme_get\", \"theme_update\", \n                \"theme_test\")]\n        })(grep(\"^theme_.*$\", ls(\"package:ggplot2\"), perl = TRUE, \n            value = TRUE)), type = \"name\")\n    ),\n    expr = quote(do.call(.(theme), list())),\n    class = c(\"theme_block\", \"plot_layer_block\", \"plot_block\"),\n      ...\n  )\n}\n\nnew_labs_block <- function(x_lab = character(), y_lab = x_lab, title = x_lab, ...) {\n  new_block(\n    fields = list(\n      x = new_string_field(x_lab), \n      y = new_string_field(y_lab),\n      title = new_string_field(title)\n    ), \n    expr = quote(ggplot2::labs(x = .(x), y = .(y), title = .(title))),\n    class = c(\"labs_block\", \"plot_layer_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_scalefillbrewer_block <- function(palette = character(), ...) {\n\n  pal_choices <- c(\n    \"Blues\",\n    \"Greens\",\n    \"Greys\",\n    \"Oranges\",\n    \"Purples\",\n    \"Reds\"\n  )\n\n  if (!length(palette) || !(palette %in% pal_choices)) palette <- pal_choices[1]\n\n  new_block(\n    fields = list(\n      palette = new_select_field(palette, pal_choices)\n    ), \n    expr = quote(ggplot2::scale_fill_brewer(palette = .(palette))),\n    class = c(\"scalefillbrewer_block\", \"plot_layer_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_customdata_block <- function(selected = character(), ...) {\n  new_dataset_block(selected, package = \"blockr.data\", ...)\n}\n\nregister_blocks(\n  constructor = c(new_customdata_block, new_geomhistogram_block, new_theme_block, new_labs_block, new_scalefillbrewer_block, new_ggplot_block),\n  name = c(\"customdata block\", \"geom histogram block\", \"theme block\", \"labs block\", \"scalefillbrewer block\", \"ggplot block\"),\n  description = c(\n    \"Data from CDISC package\",\n    \"ggplot histogram layer\",\n    \"ggplot theme layer\",\n    \"ggplot labels\",\n    \"Scale fill brewer\",\n    \"Builds a ggplot object\"\n  ),\n  classes = list(\n    c(\"customdata_block\", \"dataset_block\", \"data_block\"),\n    c(\"geomhistogram_block\", \"plot_layer_block\", \"plot_block\"),\n    c(\"theme_block\", \"plot_layer_block\", \"plot_block\"),\n    c(\"labs_block\", \"plot_layer_block\", \"plot_block\"),\n    c(\"scalefillbrewer_block\", \"plot_layer_block\", \"plot_block\"),\n    c(\"ggplot_block\", \"plot_block\")\n  ),\n  input = c(NA_character_, \"ggplot\", \"ggplot\", \"ggplot\", \"ggplot\", \"data.frame\"),\n  output = c(\"data.frame\", \"ggplot\", \"ggplot\", \"ggplot\", \"ggplot\", \"ggplot\"),\n  package = \"blockr.demo\",\n  category = c(\"custom data\", \"visualization\", \"visualization\", \"visualization\", \"visualization\", \"visualization\")\n)\nstack <- new_stack()\nserve_stack(stack)",
                "type": "text"
              }
            ],
            "about": "Distribution of Age",
            "title": "exercise-2"
          },
          {
            "files": [
              {
                "name": "app.R",
                "content": "webr::install(\"blockr\", repos = c(\"https://bristolmyerssquibb.github.io/webr-repos/\", \"https://repo.r-wasm.org\"))\n\nlibrary(blockr)\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\nnew_ggplot_block <- function(col_x = character(), col_y = character(), ...) {\n\n  data_cols <- function(data) colnames(data)\n\n  new_block(\n    fields = list(\n      x = new_select_field(col_x, data_cols, type = \"name\"),\n      y = new_select_field(col_y, data_cols, type = \"name\")\n    ),\n    expr = quote(\n      ggplot(mapping = aes(x = .(x), y = .(y)))\n    ),\n    class = c(\"ggplot_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_geompoint_block <- function(color = character(), shape = character(), ...) {\n\n  data_cols <- function(data) colnames(data$data)\n\n  new_block(\n    fields = list(\n      color = new_select_field(color, data_cols, type = \"name\"),\n      shape = new_select_field(shape, data_cols, type = \"name\")\n    ),\n    expr = quote(\n      geom_point(aes(color = .(color), shape = .(shape)), size = 2)\n    ),\n    class = c(\"geompoint_block\", \"plot_layer_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_penguins_block <- function(selected = character(), ...) {\n  new_dataset_block(selected, package = \"palmerpenguins\", ...)\n}\n\nregister_blocks(\n  constructor = c(new_penguins_block, new_ggplot_block, new_geompoint_block),\n  name = c(\"penguins block\", \"ggplot block\", \"geompoint block\"),\n  description = c(\n    \"Data from palmerpenguins package\",\n    \"Builds a ggplot object\",\n    \"Add points geom to ggplot object\"\n  ),\n  classes = list(\n    c(\"palmer_penguins\", \"dataset_block\", \"data_block\"),\n    c(\"ggplot_block\", \"plot_block\"),\n    c(\"geompoint_block\", \"plot_layer_block\", \"plot_block\")\n  ),\n  input = c(NA_character_, \"data.frame\", \"ggplot\"),\n  output = c(\"data.frame\", \"ggplot\", \"ggplot\"),\n  package = \"blockr.demo\",\n  category = c(\"custom data\", \"visualization\", \"visualization\")\n)\n\nset_workspace(\n  data = new_stack(\n    data_block = new_dataset_block(\"penguins\", \"palmerpenguins\"),\n    title = \"Data\"\n  )\n)\nserve_workspace(clear = FALSE)",
                "type": "text"
              }
            ],
            "about": "Palmer penguins workspace",
            "title": "exercise-3"
          },
          {
            "files": [
              {
                "name": "app.R",
                "content": "webr::install(\"blockr\", repos = c(\"https://bristolmyerssquibb.github.io/webr-repos/\", \"https://repo.r-wasm.org\"))\nwebr::install(\"blockr.data\", repos = c(\"https://bristolmyerssquibb.github.io/webr-repos/\", \"https://repo.r-wasm.org\"))\n\nlibrary(blockr)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nnew_customdata_block <- function(selected = character(), ...) {\n  new_dataset_block(selected, package = \"blockr.data\", ...)\n}\n\nnew_ungroup_block <- function(...) {\n  new_block(\n    fields = list(),\n    expr = quote(dplyr::ungroup()),\n    ...,\n    class = c(\"ungroup_block\", \"transform_block\")\n  )\n}\n\nnew_ggplot_block <- function(col_x = character(), col_y = character(), ...) {\n\n  data_cols <- function(data) colnames(data)\n\n  new_block(\n    fields = list(\n      x = new_select_field(col_x, data_cols, type = \"name\"),\n      y = new_select_field(col_y, data_cols, type = \"name\")\n    ),\n    expr = quote(\n      ggplot(mapping = aes(x = .(x), y = .(y)))\n    ),\n    class = c(\"ggplot_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_geompoint_block <- function(func = c(\"shape\", \"color\"), default_columns = character(), size = integer(), ...) {\n  if (length(default_columns) > 0) {\n    stopifnot(length(func) == length(default_columns))\n  }\n\n  sub_fields <- function(data, funcs) {\n    all_cols <- colnames(data$data)\n    tmp_selects <- lapply(seq_along(funcs), function(i) {\n        default <- if (length(default_columns) > 0) {\n            default_columns[[i]]\n        }\n        else {\n            all_cols[[1]]\n        }\n        new_select_field(value = default, choices = all_cols)\n    })\n    names(tmp_selects) <- funcs\n    tmp_selects\n  }\n  ggplot_expr <- function(data, funcs, columns) {\n      if (length(funcs) == 0) {\n          return(quote(TRUE))\n      }\n      if (length(columns) == 0) {\n          return(quote(TRUE))\n      }\n      tmp_exprs <- lapply(funcs, function(fun) {\n          col <- columns[[fun]]\n          if (is.null(col)) {\n              return(quote(TRUE))\n          }\n          if (!any(col %in% colnames(data$data))) {\n              return(quote(TRUE))\n          }\n          col <- as.name(col)\n          expr <- bquote(.(column), list(column = col))\n          bquote(.(expr), list(expr = expr, column = col))\n      })\n      names(tmp_exprs) <- funcs\n      bquote(ggplot2::geom_point(ggplot2::aes(..(exprs))), list(exprs = tmp_exprs), \n          splice = TRUE)\n  }\n  func_choices <- c(\"shape\", \"color\")\n  fields <- list(\n    funcs = new_select_field(func, func_choices, multiple = TRUE),\n    columns = new_list_field(sub_fields = sub_fields), \n    expression = new_hidden_field(ggplot_expr)\n  )\n  new_block(\n    fields = fields,\n    expr = quote(.(expression)),\n    ..., \n    class = c(\"geompoint_block\", \"plot_layer_block\", \"plot_block\")\n  )\n}\n\nnew_geomerrorbar_block <- function(func = c(\"ymin\", \"ymax\", \"color\"), default_columns = character(), width = integer(), ...) {\n  if (length(default_columns) > 0) {\n    stopifnot(length(func) == length(default_columns))\n  }\n  sub_fields <- function(data, funcs) {\n      all_cols <- colnames(data$data)\n      tmp_selects <- lapply(seq_along(funcs), function(i) {\n          default <- if (length(default_columns) > 0) {\n              default_columns[[i]]\n          }\n          else {\n              all_cols[[1]]\n          }\n          new_select_field(value = default, choices = all_cols)\n      })\n      names(tmp_selects) <- funcs\n      tmp_selects\n  }\n  ggplot_expr <- function(data, funcs, columns) {\n      if (length(funcs) == 0) {\n          return(quote(TRUE))\n      }\n      if (length(columns) == 0) {\n          return(quote(TRUE))\n      }\n      tmp_exprs <- lapply(funcs, function(fun) {\n          col <- columns[[fun]]\n          if (is.null(col)) {\n              return(quote(TRUE))\n          }\n          if (!any(col %in% colnames(data$data))) {\n              return(quote(TRUE))\n          }\n          col <- as.name(col)\n          expr <- bquote(.(column), list(column = col))\n          bquote(.(expr), list(expr = expr, column = col))\n      })\n    names(tmp_exprs) <- funcs\n      bquote(ggplot2::geom_errorbar(ggplot2::aes(..(exprs))), list(exprs = tmp_exprs), \n          splice = TRUE)\n  }\n  func_choices <- c(\"ymin\", \"ymax\", \"color\")\n  fields <- list(\n    funcs = new_select_field(func, func_choices, multiple = TRUE),\n    columns = new_list_field(sub_fields = sub_fields), \n    expression = new_hidden_field(ggplot_expr)\n  )\n  new_block(\n    fields = fields,\n    expr = quote(.(expression)),\n    ..., \n    class = c(\"geomerrorbar_block\", \"plot_layer_block\", \"plot_block\")\n  )\n}\n\nnew_geomline_block <- function(func = c(\"group\", \"color\"), default_columns = character(), ...) {\n  if (length(default_columns) > 0) {\n    stopifnot(length(func) == length(default_columns))\n  }\n  sub_fields <- function(data, funcs) {\n      all_cols <- colnames(data$data)\n      tmp_selects <- lapply(seq_along(funcs), function(i) {\n          default <- if (length(default_columns) > 0) {\n              default_columns[[i]]\n          }\n          else {\n              all_cols[[1]]\n          }\n          new_select_field(value = default, choices = all_cols)\n      })\n      names(tmp_selects) <- funcs\n      tmp_selects\n  }\n  ggplot_expr <- function(data, funcs, columns) {\n      if (length(funcs) == 0) {\n          return(quote(TRUE))\n      }\n      if (length(columns) == 0) {\n          return(quote(TRUE))\n      }\n      tmp_exprs <- lapply(funcs, function(fun) {\n          col <- columns[[fun]]\n          if (is.null(col)) {\n              return(quote(TRUE))\n          }\n          if (!any(col %in% colnames(data$data))) {\n              return(quote(TRUE))\n          }\n          col <- as.name(col)\n          expr <- bquote(.(column), list(column = col))\n          bquote(.(expr), list(expr = expr, column = col))\n      })\n      names(tmp_exprs) <- funcs\n      bquote(ggplot2::geom_line(ggplot2::aes(..(exprs))), list(exprs = tmp_exprs), \n          splice = TRUE)\n  }\n  func_choices <- c(\"group\", \"color\")\n  fields <- list(\n    funcs = new_select_field(func, func_choices, multiple = TRUE),\n    columns = new_list_field(sub_fields = sub_fields), \n    expression = new_hidden_field(ggplot_expr)\n  )\n  new_block(\n    fields = fields,\n    expr = quote(.(expression)),\n    ..., \n    class = c(\"geomline_block\", \"plot_layer_block\", \"plot_block\")\n  )\n}\n\nnew_labs_block <- function(x_lab = character(), y_lab = x_lab, title = x_lab, ...) {\n  new_block(\n    fields = list(\n      x = new_string_field(x_lab), \n      y = new_string_field(y_lab),\n      title = new_string_field(title)\n    ), \n    expr = quote(ggplot2::labs(x = .(x), y = .(y), title = .(title))),\n    class = c(\"labs_block\", \"plot_layer_block\", \"plot_block\"),\n    ...\n  )\n}\n\nnew_theme_block <- function(...) {\n  new_block(\n    fields = list(\n      theme = new_select_field(\"theme_minimal\", \n        (function(x) {\n            x[!x %in% c(\"theme_set\", \"theme_get\", \"theme_update\", \n                \"theme_test\")]\n        })(grep(\"^theme_.*$\", ls(\"package:ggplot2\"), perl = TRUE, \n            value = TRUE)), type = \"name\")\n    ),\n    expr = quote(do.call(.(theme), list())),\n    class = c(\"theme_block\", \"plot_layer_block\", \"plot_block\"),\n      ...\n  )\n}\n\nregister_blocks(\n  constructor = c(\n    new_customdata_block,\n    new_ungroup_block,\n    new_ggplot_block,\n    new_geompoint_block,\n    new_geomerrorbar_block,\n    new_geomline_block,\n    new_labs_block,\n    new_theme_block\n  ),\n  name = c(\n   \"Custom data block\",\n   \"Ungroup block\",\n   \"ggplot block\",\n   \"Geom point block\",\n   \"Geom error bar block\",\n   \"Geom line block\",\n   \"Labs block\",\n   \"Theme block\"\n  ),\n  description = c(\n    \"Creates a custom data block\",\n    \"Creates an ungroup block\",\n    \"Creates a ggplot block\",\n    \"Creates a geom point block\",\n    \"Creates a geom errorbar block\",\n    \"Creates a geom line block\",\n    \"Creates a label block\",\n    \"Creates a theme block\"\n  ),\n  classes = list(\n    c(\"customdata_block\", \"data_block\"),\n    c(\"ungroup_block\", \"transform_block\"),\n    c(\"ggplot_block\", \"plot_block\"),\n    c(\"geompoint_block\", \"plot_layer_block\", \"plot_block\"),\n    c(\"geomerrorbar_block\", \"plot_layer_block\", \"plot_block\"),\n    c(\"geomline_block\", \"plot_layer_block\", \"plot_block\"),\n    c(\"labs_block\", \"plot_layer_block\", \"plot_block\"),\n    c(\"theme_block\", \"plot_layer_block\", \"plot_block\")\n  ),\n  input = c(\n    NA_character_,\n    \"data.frame\",\n    \"data.frame\",\n    rep(\"ggplot\", 5)\n  ),\n  output = c(\n    rep(\"data.frame\", 2),\n    rep(\"ggplot\", 6)\n  ),\n  package = \"blockr.demo\",\n  category = c(\n    \"Custom data\",\n    \"Transform\",\n    rep(\"visualization\", 6)\n  )\n)\n\nset_workspace()\nserve_workspace(clear = FALSE)\n\n#set_workspace(\n#  lab_data = new_stack(\n#    data = new_dataset_block(\"lab\", \"blockr.data\"),\n#    title = \"Lab data\"\n#  ),\n#  merged_data = new_stack(\n#    data = new_dataset_block(\"demo\", \"blockr.data\"),\n#    join = new_join_block(y = \"lab_data\", type = \"inner\", by = c(\"STUDYID\", \"USUBJID\"), submit = TRUE),\n#    title = \"Merged data\"\n#  ),\n#  hb_data = new_stack(\n#    data = new_result_block(\"merged_data\"),\n#    filter = new_filter_block(columns = \"LBTEST\", values = \"Hemoglobin\", submit = TRUE),\n#    arrange = new_arrange_block(\"VISITNUM\"),\n#    mutate = new_mutate_block(),\n#    title = \"Hemoglobin data\"\n#  ),\n#  summary_data = new_stack(\n#    data = new_result_block(\"hb_data\"),\n#    group_by = new_group_by_block(\"VISIT\", \"ACTARM\"),\n#    summarize = new_summarize_block(func = c(\"mean\", \"se\"), default_columns = c(\"LBSTRESN\", \"LBSTRESN\"), submit = TRUE),\n#    ungroup = new_ungroup_block(),\n#    mutate = new_mutate_block(),\n#    title = \"Summary data\"\n#  ),\n#  plot = new_stack(\n#    new_result_block(\"summary_data\")#,\n#    #new_ggplot_block(x = \"VISIT\", y = \"MEAN\"),\n#    #new_geompoint_block(func = c(\"color\", \"shape\"), default_columns = c(\"ACTARM\", \"ACTARM\")),\n#    #new_errorbar_block(func = c(\"ymin\", \"ymax\", \"color\"), default_columns = c(\"ymin\", \"ymax\", \"ACTARM\")),\n#    #new_labs_block(x_lab = \"Visit Label\", y_lab = \"Hemoglobin (g/dL)\", title = \"Mean and SD of Hemoglobin by Visit\"),\n#    #new_theme_block()\n#  )\n#)\n\n#serve_workspace(clear = FALSE)",
                "type": "text"
              }
            ],
            "about": "Hemoglobin by Visit workspace",
            "title": "exercise-4"
          }
        ]
      },
      {
        "category": "2-blockr-dev",
        "apps": []
      }
    ]
  }
]
