---
title: "Introduction to blockr for users"
author: "Karma Tarap (BMS), John Coene (The Y Company) and David Granjon (cynkra GmbH)"
format: 
  revealjs:
    #code-annotations: select
    footer: "Funded by <img class=\"mb-4\" src=\"../../assets/images/bms.svg\"/>"
    include-in-header:
      - text: |
          <script src="https://cdn.jsdelivr.net/npm/mermaid@10.9.1/dist/mermaid.min.js"></script>
    css: [
      "../../assets/css/custom.css"
    ]
    view-distance: 5
    mermaid:
      theme: default
    height: 900
    width: 1600
    code-link: true
    code-copy: true
    fontsize: 24pt
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    chalkboard: false
    transition: none
    background-transition: none
editor:
    render-on-save: true
---

```{r setup}
library(ggplot2)
library(palmerpenguins)
library(dplyr)
source("../../assets/R/shinylive/tools.R")
shinylive_links <- create_shinylive_links("./shinylive")
```

# {background-image="../../assets/images/bechamel-sauce.jpg" background-size="cover"}

<!--
Imagine if we could build an interactive datapipeline like we would prepare a meal ðŸ˜³
--->


## ![shiny homepage](../../assets/images/easy-browser.png){.center width=50% style="margin-left: 350px;"}

## ![shiny homepage corrected](../../assets/images/notsoeasy-browser.png){.center width=50% style="margin-left: 350px;"}

## Developing enterprise-grade dashboards isn't easy {background-image="../../assets/images/undraw_lost_re_xqjt.svg" background-size="40%" style="font-size: 1.5em"}

<!-- 
- Do you know how to prepare a meal without the right recipe?
- Do you have the right ingredients?
-->

## Commercial solutions {background-size="40%" style="font-size: 1.5em"}
::: {layout-ncol=2}
![](../../assets/images/tableau.svg)

![](../../assets/images/power-bi.svg)
:::

- License cost ðŸ’²ðŸ’²ðŸ’².
- Not R specific.


## ðŸ’¡ Introducing {blockr} {style="font-size: 1.5em"}

. . .

> "Shiny's WordPress" (John Coene, 2024)

. . .

::::{.columns}

:::{.column}
![](../../assets/images/undraw_empty_cart_co35.svg){width=75%}
:::

:::{.column}

:::{.incremental}
- __Supermarket__ for data analysis with R.
- __No-Code__ dashboard builder ...
- ... __Extendable__ by developers.
- __Collaborative__ tool.
- __Reproducible__ code.
:::

:::

::::


# blockr 101 {data-stack-name="blockr 101" background-image="../../assets/images/undraw_cooking_p7m1.svg" background-size="40%" style="margin-top: -350px; font-size: 1.5em"}

## Problem: palmer penguins plot {style="font-size: 1.5em"}

. . . 

What penguin species has the largest flippers?

<!-- Histogram showing `flipper length` as function of `body mass` by `species` only for `female` penguins.

-->

. . .

```{r}
#| echo: false
#| fig-align: center
#| out-width: 65%
penguins |>
  filter(sex == "female") |>
  ggplot(
    aes(
      x = body_mass_g, 
      y = flipper_length_mm
    )
  ) +
  geom_point(
    aes(
      color = species, 
      shape = species
    ), 
    size = 2
  )
```

. . .

- How can I produce this plot?

. . .

- Should I ask my colleagues to develop an interactive app for this?

## The stack: a data analysis recipe {style="font-size: 1.5em"}

::::{.columns}

:::{.column}
```{mermaid}
%%| mermaid-format: svg
flowchart TD
  subgraph stack1[Stack]
    direction TB
    subgraph input_block[Block 1]
      input(Data: dataset, browser, ...)
    end
    subgraph transform_block[Block 2]
      transform(Transform block: filter, select ...)
    end
    subgraph output_block[Block 3]
      output(Result/transform: plot, filter, ...)
    end
    input_block --> |data| transform_block --> |data| output_block
  end
```
:::

:::{.column}
Collection of instructions, __blocks__, from __data import__ to __wrangling/visualization__.
:::

::::

## Zoom on blocks: processing units {style="font-size: 1.5em"}

- Blocks categories: __import__ (data), __transform__ data, __visualize__, ...
- Provided by developers (or us).

. . .

![[Designed by upklyak / Freepik](https://fr.freepik.com/vecteurs-libre/bande-transporteuse-bouteilles-lait-bras-robotiques_9668766.htm#fromView=keyword&page=1&position=15&uuid=f6eefbdf-ed34-4642-a174-c12ea709a666:~:text=Image%20de%20upklyak%20sur%20Freepik)](../../assets/images/factory.jpg)

## Example: transform blocks {style="font-size: 1.5em"}

::::{.columns}

:::{.column width="50%"}
```{mermaid}
flowchart TD
  blk_data_in(Input data)
  blk_data_out[Output]
  subgraph blk_block[Transform block]
    blk_field1(Field 1)
    blk_field2(Field 2)
    blk_field1 --> |interactivity| blk_expr
    blk_field2 --> |interactivity| blk_expr
    blk_expr(Expression)
    blk_res(result)
    blk_expr --> |evaluate| blk_res
  end
  blk_data_in --> blk_block --> blk_data_out
```
:::

:::{.column width="50%"}
A __transform__ block:

- Takes input data.
- Exposes __interactive__ input to transform the data (select column, filter rows, ...).
- Returns the transformed data.
:::
::::

## ðŸ§ª Exercise 1

::::{.columns}

:::{.column}
```{r}
create_link_iframe(shinylive_links["./shinylive/exercise-1"], header = FALSE)
```
:::

:::{.column}
Instructions:

- Click on the `+` button (top right corner).
- Add a `palmer_penguins` block. You may search in the list.
- Add a new `filter_block`, selecting `sex` as __column__ and `female` as __value__. Click on `run`.
- Add a new `ggplot_block`. Select `x` and `y` wizely.
- Add a new `geompoint_block`. You may change `shape` and `color`.
- You can remove and re-add blocks as you like ...
- Export the stack code and try to run it.
:::

::::

## How much code would it take with Shiny? {style="font-size: 1.5em"}

. . .

::: {style="font-size: 40%;" id="code-with-shiny"}
```{r, echo=TRUE, eval=FALSE}
library(shiny)
library(bslib)
library(ggplot2)
library(palmerpenguins)

shinyApp(
  ui = page_fluid(
    layout_sidebar(
      sidebar = sidebar(
        radioButtons("sex", "Sex", unique(penguins$sex), "female"),
        selectInput(
          "xvar", 
          "X var", 
          colnames(dplyr::select(penguins, where(is.numeric))),
          "body_mass_g"
        ),
        selectInput(
          "yvar",
          "Y var",
          colnames(dplyr::select(penguins, where(is.numeric))),
          "flipper_length_mm"
        ),
        selectInput(
          "color",
          "Color and shape",
          colnames(dplyr::select(penguins, where(is.factor))),
          "species"
        )
      ),
      plotOutput("plot")
    )
  ),
  server = function(input, output, session) {
    output$plot <- renderPlot({
      penguins |>
        filter(sex == !!input$sex) |>
        ggplot(aes(x = !!input$xvar, y = !!input$yvar)) +
        geom_point(aes(color = !!input$color, shape = !!input$color), size = 2)
    })
  }
)
```
:::

Changing the data, you also need to change the entire hardcoded server logic!

## It's much easier with blockr {style="font-size: 1.5em"}

. . .

```{r, echo=TRUE, eval=FALSE}
library(blockr)
new_stack( # <1>
  data_block = new_dataset_block("penguins", "palmerpenguins"), # <2>
  filter_block = new_filter_block("sex", "female"), #<2>
  plot_block = new_ggplot_block("body_mass_g", "flipper_length_mm"), # <3>
  layer_block = new_geompoint_block("species", "species") # <4>
)
serve_stack(stack) # <5>
```

1. Create the stack.
2. Import data.
3. Create the plot.
4. Add it a layer.
5. Serve a Shiny app.

## ðŸ§ª Exercise 2: with pharma data

::::{.columns}

:::{.column}
```{r}
create_link_iframe(shinylive_links["./shinylive/exercise-2"], header = FALSE)
```
:::

:::{.column}
Instructions: distribution of age in demo dataset

1. Add a `customdata_block` with `demo` as __selected__ dataset.
2. Add a `ggplot_block` with `x` as __func__ and `AGE` as __default_columns__.
3. Add a `geomhistogram_block` (you can leave default settings).
4. Add a `labs_block` with `title = "Distribution of Age"`, `x = "Age (Years)`, `y = "Count"` as settings.
5. Add a `theme_block`.
6. Add a `scalefillbrewer_block`.
:::

::::

## Connecting stacks: towards a dinner party {background-image="../../assets/images/undraw_special_event.svg" background-size="40%" style="font-size: 1.5em"}


## The workspace {style="font-size: 1.5em"}

::::{.columns}

:::{.column width=60%}
```{mermaid}
flowchart TD
  subgraph LR workspace[Workspace]
    subgraph stack1[Stack]
      direction LR
      subgraph input_block[Block 1]
        input(Data: dataset, browser, ...)
      end
      subgraph transform_block[Block 2]
        transform(Transform block: filter, select ...)
      end
      subgraph output_block[Block 3]
        output(Result/transform: plot, filter, ...)
      end
      input_block --> |data| transform_block --> |data| output_block
    end
    subgraph stack2[Stack 2]
      stack1_data[Stack 1 data] --> |data| transform2[Transform]
    end
    stack1 --> |data| stack2
    subgraph stackn[Stack n]
      stacki_data[Stack i data] --> |data| transformn[Transform] --> |data| Visualize
    end
    stack2 ---> |... data| stackn
  end
```
:::

:::{.column width=40%}
Collection of __recipes__ (stacks) to build a __dashboard__.

:::

::::


## ðŸ§ª Exercise 3: share data between stacks

::::{.columns}

:::{.column width="60%"}
```{r}
create_link_iframe(shinylive_links["./shinylive/exercise-3"], header = FALSE)
```
:::

:::{.column width="40%"}
Instructions:

- Click on `Add stack`.
- From the new stack: click on `+` to add a new `result_block`.
- Add a new `filter_block` to stack 1, with `sex` as __column__ and `female` as __value__.
- Notice how the __result__ of the second stack changes.
- Add a new `ggplot_block`.
- Add a new `geom_point block`.
:::

::::

## How do I create a workspace? {style="font-size: 1.5em"}

```{r, eval=FALSE, echo=TRUE}
library(blockr)
# Creates an empty workspace
set_workspace( # <1>
  stack_1 = new_stack(), # <2>
  stack_2 = new_stack()
)
serve_workspace(clear = FALSE) # <3>
```

1. Initialise.
2. Optional: add stacks.
3. Serve Shiny app.


## ðŸ§ª Exercise 4: with pharma data


```{r}
create_link_iframe(shinylive_links["./shinylive/exercise-4"], header = FALSE)
```

## How far can I go with blockr? {background-image="../../assets/images/undraw_add_post_re_174w.svg" background-size="90%" style="margin-left: 450px; margin-top: 700px; font-size: 1.5em"}
