---
title: "Introduction to blockr for developers"
author: "David Granjon (cynkra GmbH), Karma Tarap (BMS) and John Coene (The Y Company)"
format: 
  revealjs:
    #code-annotations: select
    footer: "<div class=\"container\"><img src=\"../../assets/images/bms.svg\"/> <img src=\"../../assets/images/cynkra.svg\" width=\"15%\"/><img src=\"../../assets/images/y-company.png\" width=\"15%\"/></div>"
    include-in-header:
      - text: |
          <script src="https://cdn.jsdelivr.net/npm/mermaid@10.9.1/dist/mermaid.min.js"></script>
    css: [
      "../../assets/css/custom.css"
    ]
    view-distance: 5
    mermaid:
      theme: default
    height: 900
    width: 1600
    code-link: true
    code-copy: true
    fontsize: 24pt
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    chalkboard: false
    transition: none
    background-transition: none
editor:
    render-on-save: true
---

```{r, setup}

```

# Create your own blocks </br> supermarket {background-image="../../assets/images/undraw_empty_cart_co35.svg" background-size="60%" style="margin-top: -300px; font-size: 1.5em"}

## Zoom on blocks and fields ðŸ¥¦ ðŸ¥š {style="font-size: 1.5em"}

::::{.columns}

:::{.column}
```{mermaid}
flowchart TD
  blk_data_in(Data input)
  blk_data_out[Output]
  subgraph blk_block[Block]
    subgraph blk_field1[Field 1]
      value(Value)
      title(Title)
      descr(Description)
      status(Status)
    end
    blk_field2(Field 2)
    blk_field1 --> blk_expr
    blk_field2 --> blk_expr
    blk_expr(Expression)
    blk_res(result)
    blk_expr --> blk_res
  end
  blk_data_in --> blk_block --> blk_data_out
```
:::

:::{.column style="font-size: 0.75em"}
- __Fields__ are __ingredients__.
- A __block__ is a recipe __step__:

    - (Optional) input data.
    - __fields__, build the block expression and translated into Shiny inputs.
    - An __expression__, evaluated with input data: `data |> select(<COLNAMES>)`.
    - A __result__, of the evaluated expression.
    - A __class__ for customization (see advanced part).
:::

:::

## How does a select block look like? (1/6) {auto-animate=true style="font-size: 1.5em"}

<br>

```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "1"
new_select_block <- function (columns = character(), ...) { # <1>
  all_cols <- function(data) colnames(data)
  fields <- list(
    columns = new_select_field(columns, all_cols, multiple = TRUE, title = "Columns")
  )

  select_expr <- quote(dplyr::select(.(columns)))

  new_block(
    fields = fields,
    expr = select_expr,
    class = c("select_block", "transform_block"),
    ...
  )
}
```

1. __Constructor__ with parameters.

## How does a select block look like? (2/6) {auto-animate=true style="font-size: 1.5em"}

<br>

```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "3|4-6|11"
new_select_block <- function (columns = character(), ...)
{
  all_cols <- function(data) colnames(data) # <2>
  fields <- list( # <2>
    columns = new_select_field(columns, all_cols, multiple = TRUE, title = "Columns") # <2>
  ) # <2>

  select_expr <- quote(dplyr::select(.(columns)))

  new_block(
    fields = fields, # <2>
    expr = select_expr,
    class = c("select_block", "transform_block"),
    ...
  )
}
```

1. __Constructor__ with parameters.
2. Dynamic __field__ (changes with data).

## How does a select block look like? (3/6) {auto-animate=true style="font-size: 1.5em"}

<br>

```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "8|12"
new_select_block <- function (columns = character(), ...)
{
  all_cols <- function(data) colnames(data)
  fields <- list(
    columns = new_select_field(columns, all_cols, multiple = TRUE, title = "Columns")
  )

  select_expr <- quote(dplyr::select(.(columns))) # <3>

  new_block(
    fields = fields,
    expr = select_expr, # <3>
    class = c("select_block", "transform_block"),
    ...
  )
}
```

1. __Constructor__ with parameters.
2. Dynamic __field__ (changes with data).
3. Create the __expression__ (to calculate the result).

## How does a select block look like? (4/6) {auto-animate=true style="font-size: 1.5em"}

<br>

```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "13"
new_select_block <- function (columns = character(), ...)
{
  all_cols <- function(data) colnames(data)
  fields <- list(
    columns = new_select_field(columns, all_cols, multiple = TRUE, title = "Columns")
  )

  select_expr <- quote(dplyr::select(.(columns)))

  new_block(
    fields = fields,
    expr = select_expr,
    class = c("select_block", "transform_block"), # <4>
    ...
  )
}
```

1. __Constructor__ with parameters.
2. Dynamic __field__ (changes with data).
3. Create the __expression__ (to calculate the result).
4. Add custom class `transform_block`.

## How does a select block look like? (5/6) {auto-animate=true style="font-size: 1.5em"}

<br>

```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "14"
new_select_block <- function (columns = character(), ...)
{
  all_cols <- function(data) colnames(data)
  fields <- list(
    columns = new_select_field(columns, all_cols, multiple = TRUE, title = "Columns")
  )

  select_expr <- quote(dplyr::select(.(columns)))

  new_block(
    fields = fields,
    expr = select_expr,
    class = c("select_block", "transform_block"),
    ... # <5>
  )
}
```

1. __Constructor__ with parameters.
2. Dynamic __field__ (changes with data).
3. Create the __expression__ (to calculate the result).
4. Add custom class `transform_block`.
5. `...` for extra parameters like `submit`.

## How does a select block look like? (6/6) {auto-animate=true style="font-size: 1.5em"}

<br>

```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "10-15"
new_select_block <- function (columns = character(), ...)
{
  all_cols <- function(data) colnames(data)
  fields <- list(
    columns = new_select_field(columns, all_cols, multiple = TRUE, title = "Columns")
  )

  select_expr <- quote(dplyr::select(.(columns)))

  new_block( # <6>
    fields = fields,
    expr = select_expr,
    class = c("select_block", "transform_block"),
    ...
  )
}
```

1. __Constructor__ with parameters.
2. Dynamic __field__ (changes with data).
3. Create the __expression__ (to calculate the result).
4. Add custom class `transform_block`.
5. `...` for extra parameters like `submit`.
6. Call __new_block__, passing fields, an expression and custom __class__.

## Today's mission {style="font-size: 1.5em"}

Create a new cardinal[^cardinal] block: 

`cardinal::make_table_09_gtsum`

<iframe src="https://pharmaverse.github.io/cardinal/quarto/table-templates/template-table_09.html" width="100%" height="500px"></iframe>

[^cardinal]: code: https://github.com/pharmaverse/cardinal/blob/main/R/fda-table_09.R#L375

## ðŸ§ª Exercise 1: create new blocks (fields) {auto-animate=true style="font-size: 1.5em"}

::: {style="font-size: 1em"}
```{r, eval=FALSE, echo=TRUE}
new_cardinal09_block <- function(
  id_var = "USUBJID",
  arm_var = "ARM",
  saffl_var = "SAFFL",
  pref_var = "AEDECOD",
  show_colcounts = TRUE,
  ...) {

}
```

1. Open the Posit Cloud project.
2. Open `R/cardinal.R`.
3. Create a field for each parameter. For booleans you can use `new_switch_field(<VALUE>)` and `new_select_field(values, choices)` for
other parameters. You can use the existing `all_cols` for dynamic choices.

:::

## ðŸ§ª Exercise 1: solution {auto-animate=true style="font-size: 1.5em"}

::: {style="font-size: 1em"}
```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "9|11-17|20"
new_cardinal09_block <- function(
  id_var = "USUBJID",
  arm_var = "ARM",
  saffl_var = "SAFFL",
  pref_var = "AEDECOD",
  show_colcounts = TRUE,
  ...) {

  all_cols <- function(data) colnames(data) # <1>

  fields <- list(# <2>
    id_var = new_select_field(id_var, all_cols, title = "ID"), # <2>
    arm_var = new_select_field(arm_var, all_cols, title = "ARM"), # <2>
    saffl_var = new_select_field(saffl_var, all_cols, title = "SAFFL"), # <2>
    pref_var = new_select_field(pref_var, all_cols, title = "Pref"), # <2>
    show_colcounts = new_switch_field(show_colcounts, title = "Show column counts") # <2>
  ) # <2>

  new_block(
    fields = fields, # <2>

  )
}
```
1. Construct columns dynamically.
2. Add field(s) for interactivity.
:::

## ðŸ§ª Exercise 2: create new blocks (expression)

::: {style="font-size: 1em"}
```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "21-30"
new_cardinal09_block <- function(
  id_var = "USUBJID",
  arm_var = "ARM",
  saffl_var = "SAFFL",
  pref_var = "AEDECOD",
  show_colcounts = TRUE,
  ...) {

  all_cols <- function(data) colnames(data)

  fields <- list(
    id_var = new_select_field(id_var, all_cols, title = "ID"),
    arm_var = new_select_field(arm_var, all_cols, title = "ARM"),
    saffl_var = new_select_field(saffl_var, all_cols, title = "SAFFL"),
    pref_var = new_select_field(pref_var, all_cols, title = "Pref"),
    show_colcounts = new_switch_field(show_colcounts, title = "Show column counts")
  )

  new_block(
    fields = fields,
    expr = quote({
      cardinal::make_table_09_gtsum(
        adae = data,
        # TO DO
      )
    })
  )
}
```
3. Fill in the `cardinal::make_table_09_gtsum` call to pass in fields name like so: `<param_name> = .(field_name)`. This strange notation is needed by `bquote` for partial substitution.

:::


## ðŸ§ª Exercise 2: solution {auto-animate=true style="font-size: 1.5em"}


::: {style="font-size: 1em"}
```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "21-30"
new_cardinal09_block <- function(
  id_var = "USUBJID",
  arm_var = "ARM",
  saffl_var = "SAFFL",
  pref_var = "AEDECOD",
  show_colcounts = TRUE,
  ...) {

  all_cols <- function(data) colnames(data)

  fields <- list(
    id_var = new_select_field(id_var, all_cols, title = "ID"),
    arm_var = new_select_field(arm_var, all_cols, title = "ARM"),
    saffl_var = new_select_field(saffl_var, all_cols, title = "SAFFL"),
    pref_var = new_select_field(pref_var, all_cols, title = "Pref"),
    show_colcounts = new_switch_field(show_colcounts, title = "Show column counts")
  )

  new_block(
    fields = fields,
    expr = quote({ # <3>
      cardinal::make_table_09_gtsum( # <3>
        adae = data, # <3>
        arm_var = .(arm_var), # <3>
        saffl_var = .(saffl_var), # <3>
        id_var = .(id_var), # <3>
        pref_var = .(pref_var), # <3>
        show_colcounts = .(show_colcounts) # <3>
      ) # <3>
    }) # <3>
  )
}
```
3. This __expression__ is then __evaluated__ later with the previous block's __data__ and field values.

:::


## How to control block's behavior? About blockr classes {style="font-size: 1.5em"}

::::{.columns}

:::{.column width=40%}
```{mermaid}
flowchart LR
  block_generic[Block generic] --> data_block_method[Data block method]
  block_generic --> transform_block_method[Transform block method]
  block_generic --> plot_block_method[Plot block method]
```
:::

:::{.column width=60%}
__S3 OO system__[^S3]: __customize__ behavior depending on object __class__.

```r
uiOutputBlock.block <- function(x, ns) {
  DT::dataTableOutput(ns("res"))
}

server_output.block <- function(x, result, output) {
  DT::renderDT(
    {
      result() |>
        DT::datatable(
          selection = "none",
          options = list(
            pageLength = 5L,
            processing = FALSE
          )
        )
    },
    server = TRUE
  )
}
```
:::

::::

[^S3]: S3 Object Oriented system https://adv-r.hadley.nz/s3.html


## ðŸ§ª Exercise 3: create new blocks (adding class) {auto-animate=true style="font-size: 1.5em"}
:::{style="font-size: 1em"}
```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "32"
new_cardinal09_block <- function(
  id_var = "USUBJID",
  arm_var = "ARM",
  saffl_var = "SAFFL",
  pref_var = "AEDECOD",
  show_colcounts = TRUE,
  ...) {

  all_cols <- function(data) colnames(data)

  fields <- list(
    id_var = new_select_field(id_var, all_cols, title = "ID"),
    arm_var = new_select_field(arm_var, all_cols, title = "ARM"),
    saffl_var = new_select_field(saffl_var, all_cols, title = "SAFFL"),
    pref_var = new_select_field(pref_var, all_cols, title = "Pref"),
    show_colcounts = new_switch_field(show_colcounts, title = "Show column counts")
  )

  new_block(
    fields = fields,
    expr = quote({
      cardinal::make_table_09_gtsum(
        adae = data,
        arm_var = .(arm_var),
        saffl_var = .(saffl_var),
        id_var = .(id_var),
        pref_var = .(pref_var),
        show_colcounts = .(show_colcounts)
      )
    }),
    ...,
    class =  "<TO_REPLACE>"
  )
}
```
4. Give it the correct classes. Hints:

    - This isn't a entry point block, so no `data_block` class.
    - As `cardinal::make_table_09_gtsum` does not return data, we can't call it `transform_block`.

:::


## ðŸ§ª Exercise 3: solution {auto-animate=true style="font-size: 1.5em"}
:::{style="font-size: 1em"}
```{r, eval=FALSE, echo=TRUE}
#| code-line-numbers: "32"
new_cardinal09_block <- function(
  id_var = "USUBJID",
  arm_var = "ARM",
  saffl_var = "SAFFL",
  pref_var = "AEDECOD",
  show_colcounts = TRUE,
  ...) {

  all_cols <- function(data) colnames(data)

  fields <- list(
    id_var = new_select_field(id_var, all_cols, title = "ID"),
    arm_var = new_select_field(arm_var, all_cols, title = "ARM"),
    saffl_var = new_select_field(saffl_var, all_cols, title = "SAFFL"),
    pref_var = new_select_field(pref_var, all_cols, title = "Pref"),
    show_colcounts = new_switch_field(show_colcounts, title = "Show column counts")
  )

  new_block(
    fields = fields,
    expr = quote({
      cardinal::make_table_09_gtsum(
        adae = data,
        arm_var = .(arm_var),
        saffl_var = .(saffl_var),
        id_var = .(id_var),
        pref_var = .(pref_var),
        show_colcounts = .(show_colcounts)
      )
    }),
    ...,
    class = c("cardinal09_block") # <4>
  )
}
```
4. We'll call it `cardinal09_block`. Note that blockr does not support any method for this class. This is important for the following.

:::

## Testing our block? {style="font-size: 1.5em"}

```r
pkgload::load_all()
library(blockr)
library(cardinal)
my_stack <- new_stack(
  new_dataset_block("cadae", "random.cdisc.data"),
  new_cardinal09_block()
)
serve_stack(my_stack)
```

1. Open `inst/examples/app.R` (code above) and run it.
2. Why does this fail?
3. What did we miss?

## Adding missing pieces {style="font-size: 1.5em"}

. . .

1. We need a function that renders `gt` __outputs__ (server and ui side).

. . .

2. We need a server method for `cardinal09_block`. We can inherit the transform block one.

. . .

```r
generate_server.cardinal09_block <- blockr:::generate_server.transform_block

uiOutputBlock.cardinal09_block <- function(x, ns) {
  gt::gt_output(ns("res"))
}

server_output.cardinal09_block <- function(x, result, output) {
  gt::render_gt(result())
}
```


## How do we make custom blocks available to users? {style="font-size: 1.5em" background-image="../../assets/images/undraw_shopping_app_flsj.svg" background-size="40%"}

## The registry: the blocks supermarket {data-stack-name="Registry" style="font-size: 1.5em"}

::::{.columns}

:::{.column width=70%}
```{mermaid}
%%| mermaid-format: svg
flowchart LR
  subgraph blockr_ggplot2[blockr.ggplot2]
    new_block1[New block]
    new_block2[New block]
  end
  subgraph blockr_echarts4r[blockr.echarts4r]
    new_block3[New block]
    new_block4[New block]
  end
  blockr_ggplot2 --> |register| registry
  blockr_echarts4r --> |register| registry
  subgraph registry[Registry]
    subgraph select_reg[Select block]
      reg_name[Name: select block]
      reg_descr[Description: select columns in a table]
      reg_classes[Classes: select_block, tranform_block]
      reg_input[Input: data.frame]
      reg_output[Output: data.frame]
      reg_package[Package: blockr]
    end
    subgraph filter_reg[Filter block]
    end
    filter_reg --x |unregister| trash["fa:fa-trash"]
  end
```
:::

:::{.column width=30%}
- __Information__ about blocks. 
- __Shared__ between block packages.
:::

::::

## ðŸ§ª Exercise 4: filling the supermarket with block {style="font-size: 1.5em"}

1. Still within `R/cardinal.R`, have a look at `register_cardinal_blocks`.
2. Fill in relevant information for your `new_cardinal09_block`.
3. Within `R/zzz.R`, call `register_cardinal_blocks` to register the block(s) on package load.
4. Run the following:

```r
pkgload::load_all()
library(blockr)
library(cardinal)
my_stack <- new_stack(
  new_dataset_block("cadae", "random.cdisc.data")
)
serve_stack(my_stack)
```
5. CLick on the stack `+` button, look for the `cardinal09_block` and select it.


## ðŸ§ª Exercise 4: solution {style="font-size: 1.5em"}

```{r echo=TRUE, eval=FALSE}
register_lm_block <- function(pkg) {
  register_block(
    constructor = new_cardinal09_block,
    name = "cardinal09 block",
    description = "Create a cardinal09 block",
    classes = c("cardinal09_block", "transform_block"),
    input = "data.frame",
    output = "gt",
    package = pkg
  )
}

# Put in zzz.R
.onLoad <- function(libname, pkgname) {
  register_lm_block(pkgname)
  invisible(NULL)
}
```
